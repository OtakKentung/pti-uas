{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Serendivity\\\\Documents\\\\GitHub\\\\pti-uas\\\\src\\\\pages\\\\Map1\\\\Map1.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport { loadModules } from 'esri-loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Map1() {\n  _s();\n\n  const viewDiv = useRef(null);\n  useEffect(() => {\n    let view;\n    loadModules([\"esri/config\", \"esri/Map\", \"esri/views/SceneView\", \"esri/layers/ElevationLayer\", \"esri/layers/BaseElevationLayer\", \"esri/Basemap\", \"esri/layers/TileLayer\"], {\n      css: true\n    }).then(_ref => {\n      let [esriConfig, Map, SceneView, ElevationLayer, BaseElevationLayer, Basemap, TileLayer] = _ref;\n      esriConfig.apiKey = \"AAPK646fc7baa89c4b608eb58b54dbbbe1066JR7fGrtnfyFPoTQnl4Z7yp0rUqUJMjQUrurVPBVnBAt75VOFZL-g-La4SwrdiZf\";\n      const basemap = new Basemap({\n        baseLayers: [new TileLayer({\n          url: \"https://tiles.arcgis.com/tiles/nGt4QxSblgDfeJn9/arcgis/rest/services/terrain_with_heavy_bathymetry/MapServer\",\n          copyright: \"Bathymetry, topography and satellite imagery from <a href=\\\"https://visibleearth.nasa.gov/view_cat.php?categoryID=1484\\\" target=\\\"_blank\\\">NASA Visible Earth</a> | <a href=\\\"http://www.aag.org/global_ecosystems\\\" target=\\\"_blank\\\">World Ecological Land Units, AAG</a> | Oceans, glaciers and water bodies from <a href=\\\"https://www.naturalearthdata.com/\\\" target=\\\"_blank\\\">Natural Earth</a>\"\n        })]\n      });\n      const ExaggeratedElevationLayer = BaseElevationLayer.createSubclass({\n        properties: {\n          exaggeration: null\n        },\n        // The load() method is called when the layer is added to the map\n        // prior to it being rendered in the view.\n        load: function () {\n          this._elevation = new ElevationLayer({\n            url: \"https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/TopoBathy3D/ImageServer\"\n          }); // wait for the elevation layer to load before resolving load()\n\n          this.addResolvingPromise(this._elevation.load());\n        },\n        // Fetches the tile(s) visible in the view\n        fetchTile: function (level, row, col, options) {\n          // calls fetchTile() on the elevationlayer for the tiles\n          // visible in the view\n          return this._elevation.fetchTile(level, row, col, options).then(function (data) {\n            var exaggeration = this.exaggeration; // `data` is an object that contains the\n            // the width and the height of the tile in pixels,\n            // and the values of each pixel\n\n            for (var i = 0; i < data.values.length; i++) {\n              // Multiply the given pixel value\n              // by the exaggeration value\n              data.values[i] = data.values[i] * exaggeration;\n            }\n\n            return data;\n          }.bind(this));\n        }\n      });\n      const elevationLayer = new ExaggeratedElevationLayer({\n        exaggeration: 70\n      });\n      const map = new Map({\n        basemap: basemap,\n        ground: {\n          layers: [elevationLayer]\n        }\n      });\n      view = new SceneView({\n        container: \"viewDiv\",\n        map: map,\n        alphaCompositingEnabled: true,\n        qualityProfile: \"high\",\n        camera: {\n          position: [-55.03975781, 14.94826384, 19921223.30821],\n          heading: 2.03,\n          tilt: 0.13\n        },\n        environment: {\n          background: {\n            type: \"color\",\n            color: [255, 252, 244, 0]\n          },\n          starsEnabled: false,\n          atmosphereEnabled: false,\n          lighting: {\n            directShadowsEnabled: false,\n            date: \"Sun Jun 23 2019 19:19:18 GMT+0200 (Central European Summer Time)\"\n          }\n        },\n        constraints: {\n          altitude: {\n            min: 10000000,\n            max: 25000000\n          }\n        },\n        popup: {\n          dockEnabled: true,\n          dockOptions: {\n            position: \"top-right\",\n            breakpoint: false,\n            buttonEnabled: false\n          },\n          collapseEnabled: false\n        },\n        highlightOptions: {\n          color: [255, 255, 255],\n          haloOpacity: 0.5\n        }\n      });\n      let exaggerated = true;\n      document.getElementById(\"exaggerate\").addEventListener(\"click\", function () {\n        if (exaggerated) {\n          map.ground = \"world-elevation\";\n          this.innerHTML = \"Enable exaggeration\";\n          exaggerated = false;\n        } else {\n          map.ground = {\n            layers: [elevationLayer]\n          };\n          this.innerHTML = \"Disable exaggeration\";\n          exaggerated = true;\n        }\n      });\n    });\n    return () => {\n      //close the map view\n      if (!!view) {\n        view.destroy();\n        view = null;\n      }\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"viewDiv\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: 543\n        },\n        ref: viewDiv\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"buttons\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"exaggerate\",\n        class: \"esri-button\",\n        children: \"Disable exaggeration\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Map1, \"3c2PZd2xjbwflPWpOcmd/LY/LhU=\");\n\n_c = Map1;\nexport default Map1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map1\");","map":{"version":3,"sources":["C:/Users/Serendivity/Documents/GitHub/pti-uas/src/pages/Map1/Map1.js"],"names":["React","useRef","useEffect","loadModules","Map1","viewDiv","view","css","then","esriConfig","Map","SceneView","ElevationLayer","BaseElevationLayer","Basemap","TileLayer","apiKey","basemap","baseLayers","url","copyright","ExaggeratedElevationLayer","createSubclass","properties","exaggeration","load","_elevation","addResolvingPromise","fetchTile","level","row","col","options","data","i","values","length","bind","elevationLayer","map","ground","layers","container","alphaCompositingEnabled","qualityProfile","camera","position","heading","tilt","environment","background","type","color","starsEnabled","atmosphereEnabled","lighting","directShadowsEnabled","date","constraints","altitude","min","max","popup","dockEnabled","dockOptions","breakpoint","buttonEnabled","collapseEnabled","highlightOptions","haloOpacity","exaggerated","document","getElementById","addEventListener","innerHTML","destroy","height"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport { loadModules } from 'esri-loader';\r\n\r\n\r\nfunction Map1() {\r\n  const viewDiv = useRef(null);\r\n\r\n  useEffect(\r\n    () => {\r\n      let view;\r\n      loadModules([\"esri/config\", \"esri/Map\", \"esri/views/SceneView\", \"esri/layers/ElevationLayer\", \"esri/layers/BaseElevationLayer\", \"esri/Basemap\", \"esri/layers/TileLayer\"], {\r\n        css: true\r\n      }).then(([esriConfig, Map, SceneView, ElevationLayer, BaseElevationLayer, Basemap, TileLayer]) => {\r\n        esriConfig.apiKey = \"AAPK646fc7baa89c4b608eb58b54dbbbe1066JR7fGrtnfyFPoTQnl4Z7yp0rUqUJMjQUrurVPBVnBAt75VOFZL-g-La4SwrdiZf\";\r\n\r\n        const basemap = new Basemap({\r\n          baseLayers: [\r\n            new TileLayer({\r\n              url: \"https://tiles.arcgis.com/tiles/nGt4QxSblgDfeJn9/arcgis/rest/services/terrain_with_heavy_bathymetry/MapServer\",\r\n              copyright: \"Bathymetry, topography and satellite imagery from <a href=\\\"https://visibleearth.nasa.gov/view_cat.php?categoryID=1484\\\" target=\\\"_blank\\\">NASA Visible Earth</a> | <a href=\\\"http://www.aag.org/global_ecosystems\\\" target=\\\"_blank\\\">World Ecological Land Units, AAG</a> | Oceans, glaciers and water bodies from <a href=\\\"https://www.naturalearthdata.com/\\\" target=\\\"_blank\\\">Natural Earth</a>\"\r\n            })\r\n          ]\r\n        });\r\n\r\n\r\n        const ExaggeratedElevationLayer = BaseElevationLayer.createSubclass({\r\n\r\n          properties: {\r\n            exaggeration: null\r\n          },\r\n\r\n          // The load() method is called when the layer is added to the map\r\n          // prior to it being rendered in the view.\r\n          load: function () {\r\n            this._elevation = new ElevationLayer({\r\n              url:\r\n                \"https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/TopoBathy3D/ImageServer\"\r\n            });\r\n\r\n            // wait for the elevation layer to load before resolving load()\r\n            this.addResolvingPromise(this._elevation.load());\r\n          },\r\n\r\n          // Fetches the tile(s) visible in the view\r\n          fetchTile: function (level, row, col, options) {\r\n            // calls fetchTile() on the elevationlayer for the tiles\r\n            // visible in the view\r\n            return this._elevation.fetchTile(level, row, col, options).then(\r\n              function (data) {\r\n                var exaggeration = this.exaggeration;\r\n                // `data` is an object that contains the\r\n                // the width and the height of the tile in pixels,\r\n                // and the values of each pixel\r\n                for (var i = 0; i < data.values.length; i++) {\r\n                  // Multiply the given pixel value\r\n                  // by the exaggeration value\r\n                  data.values[i] = data.values[i] * exaggeration;\r\n                }\r\n\r\n                return data;\r\n              }.bind(this)\r\n            );\r\n          }\r\n        });\r\n\r\n        const elevationLayer = new ExaggeratedElevationLayer({ exaggeration: 70 });\r\n\r\n        const map = new Map({\r\n          basemap: basemap,\r\n          ground: {\r\n            layers: [elevationLayer]\r\n          }\r\n        });\r\n\r\n\r\n        view = new SceneView({\r\n          container: \"viewDiv\",\r\n          map: map,\r\n          alphaCompositingEnabled: true,\r\n          qualityProfile: \"high\",\r\n          camera: {\r\n            position: [-55.03975781, 14.94826384, 19921223.30821],\r\n            heading: 2.03,\r\n            tilt: 0.13\r\n          },\r\n          environment: {\r\n            background: {\r\n              type: \"color\",\r\n              color: [255, 252, 244, 0]\r\n            },\r\n            starsEnabled: false,\r\n            atmosphereEnabled: false,\r\n            lighting: {\r\n              directShadowsEnabled: false,\r\n              date: \"Sun Jun 23 2019 19:19:18 GMT+0200 (Central European Summer Time)\"\r\n            }\r\n          },\r\n          constraints: {\r\n            altitude: {\r\n              min: 10000000,\r\n              max: 25000000\r\n            }\r\n          },\r\n          popup: {\r\n            dockEnabled: true,\r\n            dockOptions: {\r\n              position: \"top-right\",\r\n              breakpoint: false,\r\n              buttonEnabled: false\r\n            },\r\n            collapseEnabled: false\r\n          },\r\n          highlightOptions: {\r\n            color: [255, 255, 255],\r\n            haloOpacity: 0.5\r\n          }\r\n        });\r\n\r\n        let exaggerated = true;\r\n\r\n        document.getElementById(\"exaggerate\").addEventListener(\"click\", function () {\r\n          if (exaggerated) {\r\n            map.ground = \"world-elevation\";\r\n            this.innerHTML = \"Enable exaggeration\";\r\n            exaggerated = false;\r\n          } else {\r\n            map.ground = {\r\n              layers: [elevationLayer]\r\n            };\r\n            this.innerHTML = \"Disable exaggeration\";\r\n            exaggerated = true;\r\n          }\r\n        });\r\n\r\n      })\r\n      return () => {\r\n        //close the map view\r\n        if (!!view) {\r\n          view.destroy()\r\n          view = null\r\n        }\r\n      }\r\n    })\r\n  return (\r\n    <div className=\"App\">\r\n      <div id=\"viewDiv\">\r\n        <div style={{ height: 543 }} ref={viewDiv}></div>\r\n      </div>\r\n      <div class=\"buttons\">\r\n        <button id=\"exaggerate\" class=\"esri-button\">\r\n          Disable exaggeration\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Map1;"]},"metadata":{},"sourceType":"module"}